import "dart:uri" as tC;import "dart:html" as j;import "dart:async" as GB;import "dart:collection" as fC;class gC{static const  hC="Chrome";static const  iC="Firefox";static const  jC="Internet Explorer";static const  kC="Safari";final  TC;final  minimumVersion;const gC(this.TC,[this.minimumVersion]);}class lC{final  name;const lC(this.name);}main(){VB=false;hB();iB();}class mC extends aB{var vC;static final gB=new j.DocumentFragment.html('''
      <div class="x-converter">
        <span> <content select=".label-one"></content> </span>
        <input type="text" style="text-align:right">
          &lt; &gt;
        <input type="text">
        <span> <content select=".label-two"></content> </span>
      </div>
    ''');var wC,xC;var yC; YC(){vC=createShadowRoot();yC=new vB(vC);vC.nodes.add(gB.clone(true));wC=vC.nodes[1].nodes[3];yC.listen(wC.onChange,(h){VC();});yC.listen(wC.onInput,(h){EB=wC.value;});yC.BB(()=>EB,(g){if(wC.value!=g)wC.value=g;},false,false);xC=vC.nodes[1].nodes[5];yC.listen(xC.onChange,(h){WC();});yC.listen(xC.onInput,(h){FB=xC.value;});yC.BB(()=>FB,(g){if(xC.value!=g)xC.value=g;},false,false);yC.AB();} aC(){yC.insert();} dC(){yC.remove();yC=wC=xC=null;} OB(){super.OB();if(vC is !j.ShadowRoot)vC=this;}var ratio=0.5;var EB='0';var FB='0'; VC(){var g=double.parse(EB);var h=g/ratio;FB=h.toStringAsFixed(2);} WC(){var h=double.parse(FB);var g=h*ratio;EB=g.toStringAsFixed(2);}} hB(){} iB(){var zC=j.document.body;var AD,BD,CD;var DD=new vB(zC);AD=zC.nodes[1].nodes[1];DD.BB(()=>0.62,(g){if(AD.xtag.ratio!=g)AD.xtag.ratio=g;},false,false);DD.o(new mC()..host=AD);BD=zC.nodes[1].nodes[3];DD.BB(()=>2.2,(g){if(BD.xtag.ratio!=g)BD.xtag.ratio=g;},false,false);DD.o(new mC()..host=BD);CD=zC.nodes[1].nodes[5];DD.BB(()=>17.06,(g){if(CD.xtag.ratio!=g)CD.xtag.ratio=g;},false,false);DD.o(new mC()..host=CD);DD.AB();DD.insert();}typedef  u( e);typedef  jB( changes);typedef  s();typedef  kB();class HB{final oldValue;final newValue;final  changes;HB(this.oldValue,this.newValue,[this.changes]); operator==(g){return g is HB&&oldValue==g.oldValue&&newValue==g.newValue&&changes==g.changes;} get hashCode=>rB(oldValue,newValue,changes); toString(){if(changes!=null)return '#<ChangeNotification to ${newValue}: ${changes}>';return '#<ChangeNotification from ${oldValue} to ${newValue}>';}}class SB{SB();} lB(g, i,[ debugName]){if(g is q){var h=g;return IB(h,(n){i(new HB(h,h,n));});}var k=new KB(g,i,debugName);if(!k.ED()){return mB;}return k.FD;} IB( g, i){if(g.cB==null)g.cB=new LB();var h=g.cB.add(i);return h.remove;}class q{} mB(){}var CB;var JB;class KB{static var nB=0;final  GD= ++KB.nB;final  HD;final  ID;final  JD;final  KD=new Map();final  LD=[] ;var MD=false;var ND;KB(this.HD,this.ID,this.JD); toString()=>JD!=null?'<observer ${GD}: ${JD}>':'<observer ${GD}>'; ED(){var h=CB;CB=this;try {ND=HD();if(ND is Iterable&&ND is !List&&ND is !q){ND=(ND as Iterable).toList();}}catch (g,i){TB(g,i,HD,'from ${this}');ND=null;}KD.forEach(OD);KD.clear();assert(CB==this);CB=h;PD();return LD.length>0;} QD( i){try {ID(i);}catch (g,h){TB(g,h,ID,'from ${this}');}} PD(){var g=ND;if(g is !q)return;LD.add(IB(g,(h){QD(new HB(g,g,h));}));} OD( i, k){LD.add(IB(i,(n){if(MD)return;for(var g in n){var h=k[g.key];if(h!=null&&(h&g.type)!=0){MD=true;if(JB==null){JB=new fC.SplayTreeMap();}JB[GD]=this;return;}}}));} FD(){for(var g in LD){g();}MD=false;}}typedef  oB(error,stackTrace,obj, message);var TB=pB; pB(i,g,h, k){print('web_ui.observe: unhandled error calling ${h} ${k}.\n' 'error:\n${i}\n\nstack trace:\n${g}');}class qB{qB();}class l<m>{var RD;var SD;var TD;var UD;l.uC( g,this.TD):UD=g{if(TD!=null)TD.VD++ ;} get next=>SD; get value=>UD;set value( g)=>UD=g; WD( g, h){SD=h;RD=g;if(g!=null)g.SD=this;if(h!=null)h.RD=this;return this;} append( g)=>new l<m>.uC(g,TD).WD(this,SD); remove(){if(TD==null)return;TD.VD-- ;if(RD!=null){RD.SD=SD;}else{TD.XD=SD;}if(SD!=null){SD.RD=RD;}else{TD.YD=RD;}SD=null;RD=null;TD=null;}}class LB<m> extends fC.IterableBase<m>{var XD;var YD; get length=>VD;var VD=0;LB(){} get head=>XD; add( h){var g=new l<m>.uC(h,this);if(YD==null)return XD=YD=g;return YD=g.WD(YD,null);} addLast( g)=>add(g); addAll( g)=>g.forEach(add); get iterator=>new nC<m>(this);}class nC<m> implements Iterator<m>{var ZD;var TD;var aD;var bD=-1;nC(this.TD){ZD=new List<l>(TD.length);var h=0;var g=TD.head;while (g!=null){ZD[h++ ]=g;g=g.next;}} get current=>aD; moveNext(){do{bD++ ;}while(bD<ZD.length&&ZD[bD].TD!=TD);if(bD<ZD.length){aD=ZD[bD].value;return true;}else{aD=null;return false;}}}UB(h,g)=>h.hashCode*31+g.hashCode;rB(h,g,i)=>UB(UB(h,g),i); sB(g){if(g is qB)return g.toString();g=g.toString();return uB(g)?g:'#';}const tB=const["http","https","ftp","mailto"]; uB( h){var g=new tC.Uri(h).scheme;if(g=='')return true;return tB.contains(g.toLowerCase())||"MAILTO"==g.toUpperCase();}abstract class v{ AB(){} insert(); remove();}class oC extends v{final  dB;var cD;final  listener;oC(this.dB,this.listener); insert(){cD=dB.listen(listener);} remove(){cD.cancel();cD=null;}}class pC extends v{final  fB;final  QB;final  eB;final  isFinal;var DB;pC(this.QB,this.fB,this.eB,this.isFinal); dD(g){fB(eB?sB(g):g);} insert(){if(isFinal){dD(QB());}else if(DB!=null){throw new StateError('data binding already attached.');}else{DB=xB(QB,(g)=>dD(g.newValue),'dom-property-binding');}} remove(){if(!isFinal){DB();DB=null;}}}class qC extends v{final o;qC(this.o); AB(){o..YC()..XC()..OB();} insert(){o..ZC()..aC();} remove(){o..dC()..cC();}}class vB extends v{final  bC;final  children=[] ;final  nodes=[] ;vB(this.bC); listen( i, h){children.add(new oC(i,(g){h(g);yB();}));} BB(g,i,h,[isUrl=false]){children.add(new pC(g,i,isUrl,h));} o( g){children.add(new qC(g));} add( g)=>nodes.add(g); addAll( g)=>nodes.addAll(g); AB(){for(var g=0,h=children.length;g<h;g++ ){children[g].AB();}} insert(){for(var g=0,h=children.length;g<h;g++ ){children[g].insert();}} remove(){for(var g=children.length-1;g>=0;g-- ){children[g].remove();}children.clear();}}var VB=false; wB(g, k,[ debugName]){if(VB)return lB(g,k);if(k==null)return (){};if(w==null)w=new LB<WB>();var h;var i=false;if(g is ZB){h=(g as ZB).eD;}else if(g is Function){h=g;try {var n=g();if(n is List){i=true;}else if(n is Iterable){i=true;h=()=>g().toList();}}catch (p,eC){print('error: evaluating ${debugName!=null?debugName:"<unnamed>"} ' 'watcher threw error (${p}, ${eC})');}}else if(g is List){h=()=>g;i=true;}else if(g is Iterable){h=()=>g.toList();i=true;}var t=i?new rC(h,k,debugName):new WB(h,k,debugName);var RB=w.add(t);return RB.remove;} xB(h,i,[debugName]){var k=wB(h,i,debugName);var g=h;if(g is Function){g=g();}if(g is Iterable&&g is !List){g=g.toList();}i(new HB(null,g));return k;}var w;class WB{final  PB;final  eD;final  fD;var gD;WB(this.eD,this.fD,this.PB){gD=eD();} toString()=>PB==null?'<unnamed>':PB; UC(){var g=hD();if(iD(g)){var h=gD;jD(g);fD(new HB(h,g));return true;}return false;} iD(g)=>gD!=g; jD(g){gD=g;}hD(){try {return eD();}catch (g,h){print('error: evaluating ${this} watcher threw an exception (${g}, ${h})');}return gD;}}final  XB=10; yB(){if(w==null)return;var g;var h=0;do{g=false;for(var i in w){if(i.UC()){g=true;}}}while(g&& ++h<XB);if(h==XB){print('Possible loop in watchers propagation, stopped dispatch.');}}typedef  YB<zB>();typedef  AC<zB>( value);class ZB<zB>{ZB();}class rC<zB> extends WB{rC(g, i, h):super(g,i,h){jD(hD());} iD( h){if(gD.length!=h.length)return true;for(int g=0;g<gD.length;g++ ){if(gD[g]!=h[g])return true;}return false;} jD(g){gD=new List<zB>.from(g);}}abstract class aB implements j.Element{var kD;var lD; get host{if(kD==null)throw new StateError('host element has not been set.');return kD;}set host( g){if(g==null){throw new ArgumentError('host must not be null.');}if(g.xtag!=null){throw new ArgumentError('host must not have its xtag property set.');}if(kD!=null){throw new StateError('host can only be set once.');}g.xtag=this;kD=g;}createShadowRoot(){if(bB){return host.createShadowRoot();}if(lD==null)lD=[] ;lD.add(new j.DivElement());return lD.last;} XC(){} ZC(){} cC(){} OB(){if(bB)return;if(lD.length==0){throw new StateError('Distribution algorithm requires at least one shadow' ' root and can only be run once.');}var k=lD;var g=k.removeLast();var RB=g;var p=new List.from(nodes);var n=[] ;var t=[] ;while (true){p=mD(g,p);var h=g.query('shadow');if(h!=null){if(k.length>0){g=k.removeLast();n.add(h);t.add(g);}else{NB(h,p);break;}}else{break;}}for(int i=0;i<n.length;i++ ){var h=n[i];var g=t[i];NB(h,g.nodes);}nodes.clear();nodes.addAll(RB.nodes);} mD( t, k){for(var g in t.queryAll('content')){if(!CC(g))continue;var i=g.attributes['select'];if(i==null||i=='')i='*';var h=[] ;var p=[] ;for(var n in k){(BC(n,i)?h:p).add(n);}if(h.length==0){h=g.nodes;}NB(g,h);k=p;}return k;}static  BC( h, g){if(h is !j.Element)return g=='*';return (h as j.Element).matches(g);}static  MB( g)=>g.tagName=='CONTENT'||g.tagName=='SHADOW';static  CC( g){assert(MB(g));for(g=g.parent;g!=null;g=g.parent){if(MB(g))return false;}return true;}static  NB( g, h){assert(MB(g));g.parent.insertAllBefore(h,g);g.remove();} get nodes=>host.nodes; replaceWith( g){host.replaceWith(g);} remove()=>host.remove();set text( g){host.text=g;} contains( g)=>host.contains(g); insertBefore( g, h)=>host.insertBefore(g,h); insertAllBefore( g, h)=>host.insertAllBefore(g,h); get attributes=>host.attributes; get children=>host.children; clone( g)=>host.clone(g); get parent=>host.parent; get parentNode=>host.parentNode; get nodeValue=>host.nodeValue; get id=>host.id; set innerHtml( g){host.innerHtml=g;} get tagName=>host.tagName; matches( g)=>host.matches(g); query( g)=>host.query(g); queryAll( g)=>host.queryAll(g); get HC=>host.HC; get IC=>host.IC; get LC=>host.LC; JC( g)=>host.JC(g); KC( g)=>host.KC(g); NC( g)=>host.NC(g); OC( g)=>host.OC(g); SC( h, g)=>host.SC(h,g);get FC=>host.FC; get GC=>host.GC; get localName=>host.localName; get MC=>host.MC; EC( h, g,[ useCapture]){host.EC(h,g,useCapture);} PC( g)=>host.PC(g); QC( h, g,[ useCapture]){host.QC(h,g,useCapture);} RC( g, h)=>host.RC(g,h);get xtag=>host.xtag;set xtag(g){host.xtag=g;} append( g)=>host.append(g); get onChange=>host.onChange; get onInput=>host.onInput;}var DC=false; get bB=>DC&&j.ShadowRoot.supported;//@ sourceMappingURL=convertThis.html_bootstrap.dart.map
