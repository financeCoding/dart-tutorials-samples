import "dart:collection" as mB;import "dart:html" as o;class nB{static const  oB="Chrome";static const  pB="Safari";final  fB;final  minimumVersion;const nB(this.fB,[this.minimumVersion]);}class qB{final  name;const qB(this.name);}var GB; OB(){var g=new DateTime.now();GB=PB(g.hour,g.minute,g.second);} PB( g, h, i){if(g>12){g=g-12;}var j=(h<=9)?'0${h}':'${h}';var m=(i<=9)?'0${i}':'${i}';return '${g}:${j}:${m}';} QB(){var xB=o.document.body;var yB;var zB=new tB(xB);yB=xB.nodes[3];var AC=zB.gB(()=>GB,false);yB.nodes.addAll([new o.Text('\n      The current time is: '),AC,new o.Text('\n    ')]);zB.EB();zB.insert();}main(){KB=false;OB();QB();}typedef  p( e);typedef  RB( changes);typedef  q();typedef  SB();class u{final oldValue;final newValue;final  changes;u(this.oldValue,this.newValue,[this.changes]); operator==(g){return g is u&&oldValue==g.oldValue&&newValue==g.newValue&&changes==g.changes;} get hashCode=>ZB(oldValue,newValue,changes); toString(){if(changes!=null)return '#<ChangeNotification to ${newValue}: ${changes}>';return '#<ChangeNotification from ${oldValue} to ${newValue}>';}}class HB{HB();} TB(g, i,[ debugName]){if(g is n){var h=g;return v(h,(m){i(new u(h,h,m));});}var j=new AB(g,i,debugName);if(!j.BC()){return UB;}return j.CC;} v( g, i){if(g.NB==null)g.NB=new BB();var h=g.NB.add(i);return h.remove;}class n{} UB(){}var s;var w;class AB{static var VB=0;final  DC= ++AB.VB;final  EC;final  FC;final  GC;final  HC=new Map();final  IC=[] ;var JC=false;var KC;AB(this.EC,this.FC,this.GC); toString()=>GC!=null?'<observer ${DC}: ${GC}>':'<observer ${DC}>'; BC(){var h=s;s=this;try {KC=EC();if(KC is Iterable&&KC is !List&&KC is !n){KC=(KC as Iterable).toList();}}catch (g,i){IB(g,i,EC,'from ${this}');KC=null;}HC.forEach(LC);HC.clear();assert(s==this);s=h;MC();return IC.length>0;} NC( i){try {FC(i);}catch (g,h){IB(g,h,FC,'from ${this}');}} MC(){var g=KC;if(g is !n)return;IC.add(v(g,(h){NC(new u(g,g,h));}));} LC( i, j){IC.add(v(i,(m){if(JC)return;for(var g in m){var h=j[g.key];if(h!=null&&(h&g.type)!=0){JC=true;if(w==null){w=new mB.SplayTreeMap();}w[DC]=this;return;}}}));} CC(){for(var g in IC){g();}JC=false;}}typedef  WB(error,stackTrace,obj, message);var IB=XB; XB(i,g,h, j){print('web_ui.observe: unhandled error calling ${h} ${j}.\n' 'error:\n${i}\n\nstack trace:\n${g}');}class YB{YB();}class l<k>{var OC;var PC;var QC;var RC;l.wB( g,this.QC):RC=g{if(QC!=null)QC.SC++ ;} get next=>PC; get value=>RC;set value( g)=>RC=g; TC( g, h){PC=h;OC=g;if(g!=null)g.PC=this;if(h!=null)h.OC=this;return this;} append( g)=>new l<k>.wB(g,QC).TC(this,PC); remove(){if(QC==null)return;QC.SC-- ;if(OC!=null){OC.PC=PC;}else{QC.UC=PC;}if(PC!=null){PC.OC=OC;}else{QC.VC=OC;}PC=null;OC=null;QC=null;}}class BB<k> extends mB.IterableBase<k>{var UC;var VC; get length=>SC;var SC=0;BB(){} get head=>UC; add( h){var g=new l<k>.wB(h,this);if(VC==null)return UC=VC=g;return VC=g.TC(VC,null);} addAll( g)=>g.forEach(add); get iterator=>new rB<k>(this);}class rB<k> implements Iterator<k>{var WC;var QC;var XC;var YC=-1;rB(this.QC){WC=new List<l>(QC.length);var h=0;var g=QC.head;while (g!=null){WC[h++ ]=g;g=g.next;}} get current=>XC; moveNext(){do{YC++ ;}while(YC<WC.length&&WC[YC].QC!=QC);if(YC<WC.length){XC=WC[YC].value;return true;}else{XC=null;return false;}}}JB(h,g)=>h.hashCode*31+g.hashCode;ZB(h,g,i)=>JB(JB(h,g),i); aB(h, g,[ stringValue]){var i=h is YB;if(stringValue==null){stringValue=h.toString();}if(!i&&g is o.Text){g.text=stringValue;}else{var j=g;g=i?new o.Element.html(stringValue):new o.Text(stringValue);j.replaceWith(g);}return g;}abstract class CB{ EB(){} insert(); remove();}class sB extends CB{final exp;final  action;final  isFinal;var t;sB(this.exp,this.action,this.isFinal); insert(){if(isFinal){action(new u(null,exp()));}else if(t!=null){throw new StateError('binding already attached');}else{t=cB(exp,action,'generic-binding');}} remove(){if(!isFinal){t();t=null;}}}class tB extends CB{final  hB;final  children=[] ;final  nodes=[] ;tB(this.hB); gB( h,i){var g=new o.Text('');children.add(new sB(()=>'${h()}',(j){g=aB(h(),g,j.newValue);},i));return g;} add( g)=>nodes.add(g); addAll( g)=>nodes.addAll(g); EB(){for(var g=0,h=children.length;g<h;g++ ){children[g].EB();}} insert(){for(var g=0,h=children.length;g<h;g++ ){children[g].insert();}} remove(){for(var g=children.length-1;g>=0;g-- ){children[g].remove();}children.clear();}}var KB=false; bB(g, j,[ debugName]){if(KB)return TB(g,j);if(j==null)return (){};if(DB==null)DB=new BB<LB>();var h;var i=false;if(g is MB){h=(g as MB).ZC;}else if(g is Function){h=g;try {var m=g();if(m is List){i=true;}else if(m is Iterable){i=true;h=()=>g().toList();}}catch (iB,jB){print('error: evaluating ${debugName!=null?debugName:"<unnamed>"} ' 'watcher threw error (${iB}, ${jB})');}}else if(g is List){h=()=>g;i=true;}else if(g is Iterable){h=()=>g.toList();i=true;}var kB=i?new uB(h,j,debugName):new LB(h,j,debugName);var lB=DB.add(kB);return lB.remove;} cB(h,i,[debugName]){var j=bB(h,i,debugName);var g=h;if(g is Function){g=g();}if(g is Iterable&&g is !List){g=g.toList();}i(new u(null,g));return j;}var DB;class LB{final  FB;final  ZC;final  aC;var bC;LB(this.ZC,this.aC,this.FB){bC=ZC();} toString()=>FB==null?'<unnamed>':FB; cC(g){bC=g;}dC(){try {return ZC();}catch (g,h){print('error: evaluating ${this} watcher threw an exception (${g}, ${h})');}return bC;}}typedef  dB<eB>();class MB<eB>{MB();}class uB<eB> extends LB{uB(g, i, h):super(g,i,h){cC(dC());} cC(g){bC=new List<eB>.from(g);}}//@ sourceMappingURL=littleben.html_bootstrap.dart.map
