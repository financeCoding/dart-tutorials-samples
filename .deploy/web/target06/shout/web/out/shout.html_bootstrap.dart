import "dart:async" as qB;import "dart:collection" as eB;import "dart:uri" as uC;import "dart:html" as CB;import "dart:isolate" as tC;class fC{static const  gC="Chrome";static const  hC="Safari";final  aC;final  minimumVersion;const fC(this.aC,[this.minimumVersion]);}class iC{final  name;const iC(this.name);}final RB=new l();var SB=''; get p{if(zB){AC(RB,t.TB,'shoutThis');}return SB;}set p( g){if(yB(RB)){BC(RB,t.TB,'shoutThis',SB,g);}SB=g;} rB(){} sB(){var h=new StringBuffer(p);for(int g=p.length-1;g>=0;g-- ){h.write(p[g]);}return h.toString();} tB(){var yC=CB.document.body;var zC,AD,BD,CD,DD;var ED=new nC(yC);zC=yC.nodes[3];ED.listen(zC.onInput,(h){p=zC.value;});ED.dC(()=>p,(g){if(zC.value!=g)zC.value=g;},false,false);AD=yC.nodes[5];var FD=ED.QB(()=>p.length,false);AD.nodes.addAll([new CB.Text('      Length: '),FD,new CB.Text(' ')]);BD=yC.nodes[7];var GD=ED.QB(()=>p.toUpperCase(),false);BD.nodes.addAll([new CB.Text('     Shouted: '),GD,new CB.Text(' ')]);CD=yC.nodes[9];var HD=ED.QB(()=>(p.length>=6)?p.substring(1,5):p.substring(0,0),false);CD.nodes.addAll([new CB.Text('   Substring: '),HD,new CB.Text(' ')]);DD=yC.nodes[11];var ID=ED.QB(()=>sB(),false);DD.nodes.addAll([new CB.Text(' Palindromic: '),ID,new CB.Text(' ')]);ED.aB();ED.insert();}main(){iB=true;rB();tB();}typedef  q( e);typedef  uB( changes);typedef  v();typedef  vB();class NB{final oldValue;final newValue;final  changes;NB(this.oldValue,this.newValue,[this.changes]); operator==(g){return g is NB&&oldValue==g.oldValue&&newValue==g.newValue&&changes==g.changes;} get hashCode=>MC(oldValue,newValue,changes); toString(){if(changes!=null)return '#<ChangeNotification to ${newValue}: ${changes}>';return '#<ChangeNotification from ${oldValue} to ${newValue}>';}}class t{static const TB=1;static const UB=2;static const fB=UB|4;static const gB=UB|8;final  type;final key;final oldValue;final newValue;t(this.type,this.key,this.oldValue,this.newValue); operator==(g){return g is t&&type==g.type&&key==g.key&&oldValue==g.oldValue&&newValue==g.newValue;} get hashCode=>NC(type,key,oldValue,newValue); toString(){var g;switch (type){case TB:g='field';break;case UB:g='index';break;case fB:g='insert';break;case gB:g='remove';break;}return '#<ChangeRecord ${g} ${key} from ${oldValue} to ${newValue}>';}} wB(g, i,[ debugName]){if(g is l){var h=g;return VB(h,(k){i(new NB(h,h,k));});}var j=new OB(g,i,debugName);if(!j.JD()){return CC;}return j.KD;} VB( g, i){if(g.FB==null)g.FB=new WB();var h=g.FB.add(i);return h.remove;}class l{var FB;var EB;final  hashCode= ++l.xB;static var xB=0;} yB( g)=>g.FB!=null&&g.FB.head!=null; get zB=>DB!=null; AC( g, h,i)=>DB.LD(g,h,i); BC( g, j,k, h, i){if((j&(t.fB|t.gB))==0){if(h==i)return;}if(w==null){w=[] ;OC(DC);}if(g.EB==null){g.EB=[] ;w.add(g);}g.EB.add(new t(j,k,h,i));} CC(){}var DB;var hB=100;var w;var AB; DC(){var u=0;while (w!=null||AB!=null){var j=w;w=null;var i=AB;AB=null;if(u++ ==hB){EC(j,i);return;}if(j!=null){for(var h in j){var MB=h.EB;h.EB=null;for(var g=h.FB.head;g!=null;g=g.next){var k=g.value;try {k(MB);}catch (dB,BB){GB(dB,BB,k,'from ${h}');}}}}if(i!=null){i.forEach((sC,eC){eC.MD();});}}} EC( k, j){var g=[] ;if(k!=null){for(var i in k){var MB=i.EB;g.add('${i} ${MB}');}}if(j!=null){for(var u in j.values){var h=u.MD();if(h!=null)g.add('${u} ${h}');}}w=null;AB=null;var BB='exceeded notifiction limit of ${hB}, possible ' 'circular reference in observer callbacks: ${g.take(10).join(", ")}';HC(BB);}class OB{static var FC=0;final  ND= ++OB.FC;final  OD;final  PD;final  QD;final  RD=new Map();final  SD=[] ;var TD=false;var UD;OB(this.OD,this.PD,this.QD); toString()=>QD!=null?'<observer ${ND}: ${QD}>':'<observer ${ND}>'; JD(){var h=DB;DB=this;try {UD=OD();if(UD is Iterable&&UD is !List&&UD is !l){UD=(UD as Iterable).toList();}}catch (g,i){GB(g,i,OD,'from ${this}');UD=null;}RD.forEach(VD);RD.clear();assert(DB==this);DB=h;WD();return SD.length>0;} XD( i){try {PD(i);}catch (g,h){GB(g,h,PD,'from ${this}');}} WD(){var g=UD;if(g is !l)return;SD.add(VB(g,(h){XD(new NB(g,g,h));}));} LD( u, BB,g){var i=RD.putIfAbsent(u,()=>new Map());try {var h=i[g];if(h==null)h=0;i[g]=h|BB;}catch (j,k){GB(j,k,g,'hashCode or operator == from ${this}');}} VD( i, j){SD.add(VB(i,(k){if(TD)return;for(var g in k){var h=j[g.key];if(h!=null&&(h&g.type)!=0){TD=true;if(AB==null){AB=new eB.SplayTreeMap();}AB[ND]=this;return;}}}));} KD(){for(var g in SD){g();}TD=false;} MD(){if(!TD)return null;var g=UD;KD();JD();try {if(g==UD)return null;}catch (i,j){GB(i,j,g,'operator == from ${this}');return null;}var h=new NB(g,UD);XD(h);return h;}}typedef  GC( message);var HC=(g)=>print(g);typedef  IC(error,stackTrace,obj, message);var GB=JC; JC(i,g,h, j){print('web_ui.observe: unhandled error calling ${h} ${j}.\n' 'error:\n${i}\n\nstack trace:\n${g}');}class KC{KC();}class LC{LC();}class n<o>{var YD;var ZD;var aD;var bD;n.vC( g,this.aD):bD=g{if(aD!=null)aD.cD++ ;} get next=>ZD; get value=>bD;set value( g)=>bD=g; dD( g, h){ZD=h;YD=g;if(g!=null)g.ZD=this;if(h!=null)h.YD=this;return this;} append( g)=>new n<o>.vC(g,aD).dD(this,ZD); remove(){if(aD==null)return;aD.cD-- ;if(YD!=null){YD.ZD=ZD;}else{aD.eD=ZD;}if(ZD!=null){ZD.YD=YD;}else{aD.fD=YD;}ZD=null;YD=null;aD=null;}}class WB<o> extends eB.IterableBase<o>{var eD;var fD; get length=>cD;var cD=0;WB(){} get head=>eD; add( h){var g=new n<o>.vC(h,this);if(fD==null)return eD=fD=g;return fD=g.dD(fD,null);} addLast( g)=>add(g); addAll( g)=>g.forEach(add); get iterator=>new jC<o>(this);}class jC<o> implements Iterator<o>{var gD;var aD;var hD;var iD=-1;jC(this.aD){gD=new List<n>(aD.length);var h=0;var g=aD.head;while (g!=null){gD[h++ ]=g;g=g.next;}} get current=>hD; moveNext(){do{iD++ ;}while(iD<gD.length&&gD[iD].aD!=aD);if(iD<gD.length){hD=gD[iD].value;return true;}else{hD=null;return false;}}}HB(h,g)=>h.hashCode*31+g.hashCode;MC(h,g,i)=>HB(HB(h,g),i);NC(g,i,h,j)=>HB(HB(g,i),HB(h,j)); OC( h()){var g=new tC.ReceivePort();g.receive((i,j){g.close();h();});g.toSendPort().send(null);} PC(h, g,[ stringValue]){var i=h is KC;if(stringValue==null){stringValue=h.toString();}if(!i&&g is CB.Text){g.text=stringValue;}else{var j=g;g=i?new CB.Element.html(stringValue):new CB.Text(stringValue);j.replaceWith(g);}return g;} QC(g){if(g is LC)return g.toString();g=g.toString();return SC(g)?g:'#';}const RC=const["http","https","ftp","mailto"]; SC( h){var g=new uC.Uri(h).scheme;if(g=='')return true;return RC.contains(g.toLowerCase())||"MAILTO"==g.toUpperCase();}abstract class IB{ aB(){} insert(); remove();}class kC extends IB{final  nB;var jD;final  listener;kC(this.nB,this.listener); insert(){jD=nB.listen(listener);} remove(){jD.cancel();jD=null;}}class lC extends IB{final exp;final  action;final  isFinal;var s;lC(this.exp,this.action,this.isFinal); insert(){if(isFinal){action(new NB(null,exp()));}else if(s!=null){throw new StateError('binding already attached');}else{s=jB(exp,action,'generic-binding');}} remove(){if(!isFinal){s();s=null;}}}class mC extends IB{final  pB;final  cB;final  oB;final  isFinal;var s;mC(this.cB,this.pB,this.oB,this.isFinal); kD(g){pB(oB?QC(g):g);} insert(){if(isFinal){kD(cB());}else if(s!=null){throw new StateError('data binding already attached.');}else{s=jB(cB,(g)=>kD(g.newValue),'dom-property-binding');}} remove(){if(!isFinal){s();s=null;}}}class nC extends IB{final  cC;final  children=[] ;final  nodes=[] ;nC(this.cC); listen( i, h){children.add(new kC(i,(g){h(g);VC();}));} QB( h,i){var g=new CB.Text('');children.add(new lC(()=>'${h()}',(j){g=PC(h(),g,j.newValue);},i));return g;} dC(g,i,h,[isUrl=false]){children.add(new mC(g,i,isUrl,h));} add( g)=>nodes.add(g); addAll( g)=>nodes.addAll(g); aB(){for(var g=0,h=children.length;g<h;g++ ){children[g].aB();}} insert(){for(var g=0,h=children.length;g<h;g++ ){children[g].insert();}} remove(){for(var g=children.length-1;g>=0;g-- ){children[g].remove();}children.clear();}}var iB=false; TC(g, k,[ debugName]){if(iB)return wB(g,k);if(k==null)return (){};if(JB==null)JB=new WB<KB>();var i;var h=m.ZC;if(g is mB){i=(g as mB).lD;}else if(g is Function){i=g;try {var j=g();if(j is List){h=m.LB;}else if(j is Iterable){h=m.LB;i=()=>g().toList();}else if((j is eB.LinkedHashMap)||(j is eB.SplayTreeMap)){h=m.ZB;}else if(j is Map){h=m.YB;}}catch (u,dB){print('error: evaluating ${debugName!=null?debugName:"<unnamed>"} ' 'watcher threw error (${u}, ${dB})');}}else if(g is List){i=()=>g;h=m.LB;}else if(g is Iterable){i=()=>g.toList();h=m.LB;}else if((g is eB.LinkedHashMap)||(g is eB.SplayTreeMap)){i=()=>g;h=m.ZB;}else if(g is Map){i=()=>g;h=m.YB;}var BB=UC(h,i,k,debugName);var MB=JB.add(BB);return MB.remove;} UC( j, g, i, h){switch (j){case m.LB:return new oC(g,i,h);case m.ZB:return new qC(g,i,h);case m.YB:return new pC(g,i,h);default:return new KB(g,i,h);}} jB(h,i,[debugName]){var j=TC(h,i,debugName);var g=h;if(g is Function){g=g();}if(g is Iterable&&g is !List){g=g.toList();}i(new NB(null,g));return j;}var JB;class KB{final  bB;final  lD;final  mD;var nD;KB(this.lD,this.mD,this.bB){nD=lD();} toString()=>bB==null?'<unnamed>':bB; bC(){var g=oD();if(pD(g)){var h=nD;qD(g);mD(new NB(h,g));return true;}return false;} pD(g)=>nD!=g; qD(g){nD=g;}oD(){try {return lD();}catch (g,h){print('error: evaluating ${this} watcher threw an exception (${g}, ${h})');}return nD;}}final  kB=10; VC(){if(JB==null)return;var g;var h=0;do{g=false;for(var i in JB){if(i.bC()){g=true;}}}while(g&& ++h<kB);if(h==kB){print('Possible loop in watchers propagation, stopped dispatch.');}}typedef  lB<WC>();typedef  XC<WC>( value);class mB<WC>{mB();}class oC<WC> extends KB{oC(g, i, h):super(g,i,h){qD(oD());} pD( g){return XB(nD,g);} qD(g){nD=new List<WC>.from(g);}}class pC<PB,YC> extends KB{pC(g, i, h):super(g,i,h){qD(oD());} pD( g){var i=nD.keys;if(i.length!=g.keys.length)return true;var j=i.iterator;while (j.moveNext()){var h=j.current;if(!g.containsKey(h))return true;if(nD[h]!=g[h])return true;}return false;} qD(g){nD=new Map<PB,YC>.from(g);}}class qC<PB,YC> extends KB{qC(g, i, h):super(g,i,h){qD(oD());} pD( g){return XB(g.keys,nD.keys)||XB(g.values,nD.values);} qD(g){nD=new eB.LinkedHashMap.from(g);}} XB( i, j){var h=i.iterator;var g=j.iterator;while (h.moveNext()){if(!g.moveNext())return true;if(h.current!=g.current)return true;}return g.moveNext();}class m{final rD;const m.wC(this.rD);toString()=>'Enum.${rD}';static const LB=const m.wC('LIST');static const YB=const m.wC('HASH_MAP');static const ZB=const m.wC('ORDERED_MAP');static const ZC=const m.wC('OTHER');}//@ sourceMappingURL=shout.html_bootstrap.dart.map
